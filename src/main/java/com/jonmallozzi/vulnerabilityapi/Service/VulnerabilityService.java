package com.jonmallozzi.vulnerabilityapi.Service;

import com.jonmallozzi.vulnerabilityapi.Exceptions.Vulnerability.VulnerabilityAlreadyExists;
import com.jonmallozzi.vulnerabilityapi.Exceptions.Vulnerability.VulnerabilityDoesNotExist;
import com.jonmallozzi.vulnerabilityapi.Model.Vulnerability;
import com.jonmallozzi.vulnerabilityapi.Repository.VulnerabilityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.List;

@Service
public class VulnerabilityService {
    private final VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    public VulnerabilityService(VulnerabilityRepository vulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    public Map<String, Vulnerability> list() {
        return vulnerabilityRepository.findAll();
    }

    public void saveMultiple(List<Vulnerability> vulnerabilities) {
        vulnerabilityRepository.saveMultiple(vulnerabilities);
    }

    /**
     * Saves a new vulnerability unless the new vulnerability's
     * id is taken then it throws a VulnerabilityAlreadyExists
     * exception
     * @param vulnerability a Vulnerability object
     */
    public void save(Vulnerability vulnerability) {
        String id = vulnerability.getCve().getCVE_data_meta().getID();
        if(getById(id) != null) throw new VulnerabilityAlreadyExists();
        vulnerabilityRepository.save(vulnerability);
    }

    /**
     * Updates a vulnerability with the one provided unless
     * there is no vulnerability with the same id as vulnerability
     * provided then it throws a VulnerabilityAlreadyExists
     * exception
     * @param vulnerability a Vulnerability object
     */
    public void update(Vulnerability vulnerability) {
        String id = vulnerability.getCve().getCVE_data_meta().getID();
        if(getById(id) == null) throw new VulnerabilityDoesNotExist();
        vulnerabilityRepository.update(vulnerability);
    }

    /**
     * Deletes the vulnerability that has the id provided
     * unless there is no vulnerability found with a matching
     * id then it throws a VulnerabilityAlreadyExists
     * exception
     * @param id an id for a Vulnerability object
     */
    public void delete(String id) {
        if(getById(id) == null) throw new VulnerabilityDoesNotExist();
        vulnerabilityRepository.delete(id);
    }

    public Vulnerability getById(String id) {
        return vulnerabilityRepository.getById(id);
    }

    public Iterable<Vulnerability> getForSoftware(String software) {
        return vulnerabilityRepository.getForSoftware(software);
    }

    public Iterable<Vulnerability> getByV3Severity(String severity) {
        return vulnerabilityRepository.getByV3Severity(severity);
    }

    public Iterable<Vulnerability> getByV2Severity(String severity) {
        return vulnerabilityRepository.getByV2Severity(severity);
    }

    public Iterable<Vulnerability> getByV3AttackVector(String attackVector) {
        return vulnerabilityRepository.getByV3AttackVector(attackVector);
    }

    public Iterable<Vulnerability> getByV2AccessVector(String accessVector) {
        return vulnerabilityRepository.getByV2AccessVector(accessVector);
    }
}
