package com.jonmallozzi.vulnerabilityapi.Repository;

import com.jonmallozzi.vulnerabilityapi.Model.Impact;
import com.jonmallozzi.vulnerabilityapi.Model.Vulnerability;
import org.springframework.stereotype.Repository;

import java.util.Map;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Repository
public class VulnerabilityRepository implements IVulnerabilityRepository {
    private final Map<String, Vulnerability> vulnerabilities;

    public VulnerabilityRepository(Map<String, Vulnerability> vulnerabilities) {
        this.vulnerabilities = vulnerabilities;
    }

    public Map<String, Vulnerability> getVulnerabilities() {
        return vulnerabilities;
    }

    @Override
    public Map<String, Vulnerability> findAll() {
        return this.vulnerabilities;
    }

    @Override
    public Vulnerability getById(String id) {
        return vulnerabilities.get(id);
    }
    @Override
    public Iterable<Vulnerability> getForSoftware(String software) {
        return vulnerabilities
                    .values()
                    .stream()
                    .filter(vulnerability -> vulnerability.getCve()
                                                            .getDescription()
                                                            .getDescription_data()
                                                            .get(0)
                                                            .getValue()
                                                            .toLowerCase()
                                                            .contains(software.toLowerCase()))
                    .collect(Collectors.toList());
    }

    @Override
    public Iterable<Vulnerability> getByV3Severity(String severity) {
        return vulnerabilities
                .values()
                .stream()
                .filter(vulnerability ->
                            Optional.ofNullable(
                                            vulnerability
                                    )
                                    .map(Vulnerability::getImpact)
                                    .map(Impact::getBaseMetricV3)
                                    .map(baseMetricV3 -> baseMetricV3.getCvssV3()
                                                                        .getBaseSeverity()
                                                                        .equalsIgnoreCase(severity))
                                    .orElse(false))
                .collect(Collectors.toList());
    }

    @Override
    public Iterable<Vulnerability> getByV2Severity(String severity) {
        return vulnerabilities
                .values()
                .stream()
                .filter(vulnerability ->
                        Optional.ofNullable(
                                        vulnerability
                                )
                                .map(Vulnerability::getImpact)
                                .map(Impact::getBaseMetricV2)
                                .map(baseMetricV2 -> baseMetricV2.getSeverity()
                                                                    .equalsIgnoreCase(severity))
                                .orElse(false))
                .collect(Collectors.toList());
    }

    @Override
    public Iterable<Vulnerability> getByV3AttackVector(String attackVector) {
        return vulnerabilities
                .values()
                .stream()
                .filter(vulnerability ->
                        Optional.ofNullable(
                                        vulnerability
                                )
                                .map(Vulnerability::getImpact)
                                .map(Impact::getBaseMetricV3)
                                .map(baseMetricV3 -> baseMetricV3.getCvssV3()
                                        .getAttackVector()
                                        .equalsIgnoreCase(attackVector))
                                .orElse(false))
                .collect(Collectors.toList());
    }

    @Override
    public Iterable<Vulnerability> getByV2AccessVector(String accessVector) {
        return vulnerabilities
                .values()
                .stream()
                .filter(vulnerability ->
                        Optional.ofNullable(
                                        vulnerability
                                )
                                .map(Vulnerability::getImpact)
                                .map(Impact::getBaseMetricV2)
                                .map(baseMetricV2 -> baseMetricV2.getCvssV2()
                                        .getAccessVector()
                                        .equalsIgnoreCase(accessVector))
                                .orElse(false))
                .collect(Collectors.toList());
    }

    @Override
    public void saveMultiple(List<Vulnerability> vulnerabilities) {
        vulnerabilities.forEach(vulnerability -> this.vulnerabilities.put(
                vulnerability
                        .getCve()
                        .getCVE_data_meta()
                        .getID(),
                        vulnerability
                ));
    }

    @Override
    public void save(Vulnerability vulnerability) {
        vulnerabilities.put(vulnerability.getCve().getCVE_data_meta().getID(), vulnerability);
    }

    @Override
    public void update(Vulnerability vulnerability) {
        vulnerabilities.replace(vulnerability.getCve().getCVE_data_meta().getID(), vulnerability);
    }

    @Override
    public void delete(String id) {
        vulnerabilities.remove(id);
    }
}
