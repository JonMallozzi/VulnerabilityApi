package com.jonmallozzi.vulnerabilityapi.Controller;

import java.util.Map;
import java.util.List;

import com.jonmallozzi.vulnerabilityapi.Model.Vulnerability;
import com.jonmallozzi.vulnerabilityapi.Service.VulnerabilityService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path = "api/v1/vulnerability")
public class VulnerabilityController {
    private final VulnerabilityService vulnerabilityService;

    public VulnerabilityController(VulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
    }

    @GetMapping()
    public Map<String,Vulnerability> listAll() {
        return vulnerabilityService.list();
    }

    @GetMapping("/id/{id}")
    public Vulnerability getVulnerabilityById(@PathVariable String id) {
        return vulnerabilityService.getById(id);
    }

    @GetMapping("/software/{software}")
    public Iterable<Vulnerability> getVulnerabilitiesForSoftware(@PathVariable String software) {
        return vulnerabilityService.getForSoftware(software);
    }

    @GetMapping("v3/severity/{severity}")
    public Iterable<Vulnerability> getVulnerabilitiesByV3Severity(@PathVariable String severity) {
        return vulnerabilityService.getByV3Severity(severity);
    }

    @GetMapping("v2/severity/{severity}")
    public Iterable<Vulnerability> getVulnerabilitiesByV2Severity(@PathVariable String severity) {
        return vulnerabilityService.getByV2Severity(severity);
    }

    @GetMapping("v3/attackVector/{attackVector}")
    public Iterable<Vulnerability> getVulnerabilitiesByV3AttackVector(@PathVariable String attackVector) {
        return vulnerabilityService.getByV3AttackVector(attackVector);
    }

    @GetMapping("v2/accessVector/{accessVector}")
    public Iterable<Vulnerability> getVulnerabilitiesByV2AccessVector(@PathVariable String accessVector) {
        return vulnerabilityService.getByV2AccessVector(accessVector);
    }

    @PostMapping("/multiple")
    public void createVulnerabilities(@RequestBody List<Vulnerability> vulnerabilities) {
        vulnerabilityService.saveMultiple(vulnerabilities);
    }

    @PostMapping()
    public void createVulnerability(@RequestBody Vulnerability vulnerability) {

        vulnerabilityService.save(vulnerability);
    }

    @PutMapping()
    public void updateVulnerability(@RequestBody Vulnerability vulnerability) {
        vulnerabilityService.update(vulnerability);
    }

    @DeleteMapping("/{id}")
    public void deleteVulnerability(@PathVariable String id) {
        vulnerabilityService.delete(id);
    }
}
