package com.jonmallozzi.vulnerabilityapi.Controller;

import com.jonmallozzi.vulnerabilityapi.MockData.MockVulerabilityPostBody;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureWebTestClient
public class VulnerabilityControllerEndToEndIntegrationTest {
    @Autowired
    private WebTestClient webClient;

    private final MockVulerabilityPostBody mockVulerabilityPostBody = new MockVulerabilityPostBody();

    @Test
    void saveVulnerability() {
        webClient.post().uri("/api/v1/vulnerability/")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(mockVulerabilityPostBody.singlePostBody)
                .exchange()
                .expectStatus().isOk();
    }

    @Test
    void itShouldNotSaveDuplicateVulnerability() {
        webClient.post().uri("/api/v1/vulnerability/")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(mockVulerabilityPostBody.duplicateIdBody)
                .exchange()
                .expectStatus()
                .isBadRequest()
                .expectBody();
    }

    @Test
    void itShouldReturnVulnerabilitiesById() {
       webClient.get().uri("/api/v1/vulnerability/id/CVE-2022-27607")
                .exchange()
                .expectStatus()
                .isOk()
                .expectBody();
    }

    @Test
    void itShouldUpdateVulnerabilityByNewVulnerability() {
        webClient.put().uri("/api/v1/vulnerability/")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(mockVulerabilityPostBody.duplicateIdBody)
                .exchange()
                .expectStatus()
                .isOk();
    }

    @Test
    void itShouldNotUpdateVulnerabilityIfIdDoesNotExist() {
        webClient.put().uri("/api/v1/vulnerability/")
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(mockVulerabilityPostBody.idDoesNotExistBody)
                .exchange()
                .expectStatus()
                .isBadRequest();
    }

    @Test
    void itShouldDeleteVulnerabilityById() {
        webClient.delete().uri("/api/v1/vulnerability/CVE-2022-27607")
                .exchange()
                .expectStatus()
                .isOk();
    }

    @Test
    void itShouldNotDeleteVulnerabilityIfIdDoesNotExist() {
        webClient.delete().uri("/api/v1/vulnerability/CVE-2022-Doesn't-exist")
                .exchange()
                .expectStatus()
                .isBadRequest();
    }
}
