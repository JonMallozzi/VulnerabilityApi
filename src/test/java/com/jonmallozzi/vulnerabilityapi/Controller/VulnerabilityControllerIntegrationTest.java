package com.jonmallozzi.vulnerabilityapi.Controller;

import com.jonmallozzi.vulnerabilityapi.MockData.MockVulerabilityPostBody;
import com.jonmallozzi.vulnerabilityapi.Service.VulnerabilityService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@SpringBootTest
@AutoConfigureMockMvc
class VulnerabilityControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private VulnerabilityService vulnerabilityService;

    private MockVulerabilityPostBody mockVulerabilityPostBody = new MockVulerabilityPostBody();

    // testing that controller works and return json
    @Test
    void testListAll() throws Exception {
        this.mockMvc.perform(get("/api/v1/vulnerability").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"));
    }

    @Test
    void testGetById() throws Exception {
        this.mockMvc.perform(get("/api/v1/vulnerability/id/CVE-2022-27607").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk());
    }

    @Test
    void testSaveVulnerability() throws Exception {
        this.mockMvc.perform(post("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                    mockVulerabilityPostBody.singlePostBody
                ))
                .andExpect(status().isOk());
    }

    @Test
    void testUpdateVulnerability() throws Exception {
        this.mockMvc.perform(put("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                        mockVulerabilityPostBody.singlePostBody
                ))
                .andExpect(status().isOk());
    }

    @Test
    void testDeleteVulnerability() throws Exception {
        this.mockMvc.perform(delete("/api/v1/vulnerability/CVE-2022-27607").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk());
    }
}