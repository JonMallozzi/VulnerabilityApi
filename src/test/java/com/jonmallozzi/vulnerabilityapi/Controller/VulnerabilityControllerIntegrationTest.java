package com.jonmallozzi.vulnerabilityapi.Controller;

import com.jonmallozzi.vulnerabilityapi.MockData.MockVulerabilityPostBody;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
class VulnerabilityControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    private final MockVulerabilityPostBody mockVulerabilityPostBody = new MockVulerabilityPostBody();

    // testing that controller works and return json
    @Test
    void testListAll() throws Exception {
        // given: a get request to the root url
        // then: json content of multiple Vulnerabilities from the vulnerability
        // json file exist
        this.mockMvc.perform(get("/api/v1/vulnerability").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$.CVE-2022-27607").exists())
                .andExpect(jsonPath("$.CVE-2021-40662").exists());
    }

    @Test
    void testGetById() throws Exception {
        // given: a get request to id/CVE-2022-27607
        // then: json content of vulnerability CVE-2022-27607 should be
        // in the return body
        this.mockMvc.perform(get("/api/v1/vulnerability/id/CVE-2022-27607").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$.cve.cve_data_meta.id").value("CVE-2022-27607"));
    }

    @Test
    void testGetForSoftware() throws Exception {
        // given: a get request to software/Chamilo
        // then: json content of vulnerability CVE-2021-40662 should be
        // in the return body has a known Chamilo vulnerabilities
        this.mockMvc.perform(get("/api/v1/vulnerability/software/Chamilo").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$[0].cve.cve_data_meta.id").value("CVE-2021-40662"));
    }

    @Test
    void testGetForSoftwareThatDoesNotExist() throws Exception {
        // given: a get request to software/aSoftwareThatDoesNotExist
        // then: json content of empty json should be the return body
        this.mockMvc.perform(get("/api/v1/vulnerability/software/aSoftwareThatDoesNotExist").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(content().string("[]"));
    }

    @Test
    void testGetByV3Severity() throws Exception {
        // given: a get request to v3/severity/high
        // then: json content should be only v3 high severity vulnerabilities
        this.mockMvc.perform(get("/api/v1/vulnerability/v3/severity/high").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$[0].impact.baseMetricV3.cvssV3.baseSeverity").value("HIGH"))
                .andExpect(jsonPath("$[1].impact.baseMetricV3.cvssV3.baseSeverity").value("HIGH"))
                .andExpect(jsonPath("$[2].impact.baseMetricV3.cvssV3.baseSeverity").value("HIGH"));
    }

    @Test
    void testGetByV2Severity() throws Exception {
        // given: a get request to v2/severity/high
        // then: json content should be only v2 high severity vulnerabilities
        this.mockMvc.perform(get("/api/v1/vulnerability/v2/severity/high").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$[0].impact.baseMetricV2.severity").value("HIGH"))
                .andExpect(jsonPath("$[1].impact.baseMetricV2.severity").value("HIGH"))
                .andExpect(jsonPath("$[2].impact.baseMetricV2.severity").value("HIGH"));
    }

    @Test
    void testGetByV3AttackVector() throws Exception {
        // given: a get request to v3/attackVector/network
        // then: json content should be only v3 network attackVector vulnerabilities
        this.mockMvc.perform(get("/api/v1/vulnerability/v3/attackVector/network").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$[0].impact.baseMetricV3.cvssV3.attackVector").value("NETWORK"))
                .andExpect(jsonPath("$[1].impact.baseMetricV3.cvssV3.attackVector").value("NETWORK"))
                .andExpect(jsonPath("$[2].impact.baseMetricV3.cvssV3.attackVector").value("NETWORK"));
    }

    @Test
    void testGetByV2AccessVector() throws Exception {
        // given: a get request to v2/accessVector/network
        // then: json content should be only v2 network accessVector  vulnerabilities
        this.mockMvc.perform(get("/api/v1/vulnerability/v2/accessVector/network").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(jsonPath("$[0].impact.baseMetricV2.cvssV2.accessVector").value("NETWORK"))
                .andExpect(jsonPath("$[1].impact.baseMetricV2.cvssV2.accessVector").value("NETWORK"))
                .andExpect(jsonPath("$[2].impact.baseMetricV2.cvssV2.accessVector").value("NETWORK"));
    }


    @Test
    void testSaveVulnerability() throws Exception {
            this.mockMvc.perform(post("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                    mockVulerabilityPostBody.singlePostBody
                ))
                .andExpect(status().isOk());
    }

    @Test
    void itShouldNotSaveVulnerabilityWithDuplicateId() throws Exception {
        // given: a post body with vulnerability with an id that already exists
        // then: it should return a bad request with the error message
        this.mockMvc.perform(post("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                        mockVulerabilityPostBody.duplicateIdBody
                ))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType("text/plain;charset=UTF-8"))
                .andExpect(content().string("There is already exists a vulnerability with this CVE id"));
    }

    @Test
    void testUpdateVulnerability() throws Exception {
        this.mockMvc.perform(put("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                        mockVulerabilityPostBody.duplicateIdBody
                ))
                .andExpect(status().isOk());
    }

    @Test
    void itShouldNotUpdateVulnerabilityIfTheIdDoesNotExist() throws Exception {
        // given: a post body with a vulnerability with an id tha does not exist
        // then: the update should return a bad request and the error message
        this.mockMvc.perform(put("/api/v1/vulnerability/").contentType(MediaType.APPLICATION_JSON_VALUE).content(
                        mockVulerabilityPostBody.idDoesNotExistBody
                ))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType("text/plain;charset=UTF-8"))
                .andExpect(content().string("Couldn't find a vulnerability with this CVE id"));
    }


    @Test
    void testDeleteVulnerability() throws Exception {
        this.mockMvc.perform(delete("/api/v1/vulnerability/CVE-2022-27607").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk());
    }

    @Test
    void itShouldNotDeleteVulnerabilityWithIdThatDoesNotExist() throws Exception {
        this.mockMvc.perform(delete("/api/v1/vulnerability/DoesNotExist").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType("application/json;charset=UTF-8"))
                .andExpect(content().string("Couldn't find a vulnerability with this CVE id"));
    }
}