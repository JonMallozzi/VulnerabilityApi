package com.jonmallozzi.vulnerabilityapi.Service;

import com.jonmallozzi.vulnerabilityapi.Model.Vulnerability;
import com.jonmallozzi.vulnerabilityapi.Repository.VulnerabilityRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class VulnerabilityServiceTest {

    @Mock
    private VulnerabilityRepository vulnerabilityRepository;
    @Mock
    private Vulnerability vulnerability;

    @Captor
    private ArgumentCaptor<List<Vulnerability>> vulnerabilityArgumentCaptor;

    private VulnerabilityService vulnerabilityService;

    @BeforeEach
    void setUp() {
        vulnerabilityService = new VulnerabilityService(vulnerabilityRepository);
    }

    @Test
    void itShouldListAllVulernabilites() {
        // when:
        vulnerabilityService.list();

        // then:
        verify(vulnerabilityRepository).findAll();
    }

    @Test
    void itShouldSaveVulernabilities() {
        // given:
        List<Vulnerability> vulnerabilities = List.of(
                vulnerability
        );

        // when:
        vulnerabilityService.save(vulnerabilities);

        // then:
        verify(vulnerabilityRepository).save(vulnerabilityArgumentCaptor.capture());

        List<Vulnerability> capturedVulnerability = vulnerabilityArgumentCaptor.getValue();

        assertThat(capturedVulnerability).isEqualTo(vulnerabilities);
    }
}